<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.cardGGaduekMainService.card.mapper.CardMapper">

    <select id="getCardFrontInfo" parameterType="long" resultType="org.cardGGaduekMainService.card.dto.CardFrontDTO">
        SELECT
            c.id AS cardId,
            IFNULL(c.custom_image_url, cp.card_image_url) AS cardImageUrl,
            cp.card_product_name AS cardProductName,
            b.bank_name AS bankName,
            m.name AS memberName,
            c.is_valid AS isValid
        FROM card c
                 JOIN card_product cp ON c.card_product_id = cp.id
                 JOIN bank b ON cp.bank_id = b.id
                 JOIN member m ON c.member_id = m.id
        WHERE c.member_id = #{memberId}
    </select>

    <select id="getCardDetailInfo" resultType="org.cardGGaduekMainService.card.dto.CardBackDTO">
        SELECT
            cp.card_product_name AS cardProductName,
            b.bank_name AS bankName
        FROM card c
                 JOIN card_product cp ON c.card_product_id = cp.id
                 JOIN bank b ON cp.bank_id = b.id
        WHERE c.id = #{cardId}
    </select>

    <select id="getCardBenefits" resultType="org.cardGGaduekMainService.card.dto.CardBenefitInfoDTO">
        SELECT
            benefit_category AS benefitCategory,
            store_name AS storeName,
            discount_rate AS discountRate,
            description AS description
        FROM card_benefit
        WHERE card_product_id = (
            SELECT card_product_id FROM card WHERE id = #{cardId}
        )
    </select>

    <!-- 카드 유효성 false (삭제 처리) -->
    <update id="softDeleteCard">
        UPDATE card
        SET is_valid = 0
        WHERE id = #{cardId}
    </update>

    <!-- 카드 이미지 변경 -->
    <update id="updateCustomImageUrl">
        UPDATE card
        SET custom_image_url = #{imageUrl}
        WHERE id = #{cardId}
    </update>

    <select id="findBenefitByCardId" parameterType="Long" resultType="org.cardGGaduekMainService.card.benefit.domain.CardBenefitVO">
        SELECT
            id,
            card_product_id,
            discount_rate,
            benefit_category,
            store_name,
            description
        FROM
            store_benefit
        WHERE
            id = #{cardId}
    </select>

    <select id="findCardProductIdByCardId" parameterType="Long" resultType="Long">
        SELECT card_product_id
        FROM card
        WHERE id = #{userCardId} AND is_valid = 1
    </select>

    <select id="findAllCardProductIdsByMemberId" parameterType="long" resultType="long">
        SELECT DISTINCT card_product_id
        FROM card
        WHERE member_id = #{memberId} AND is_valid = 1
    </select>

    <select id="findById" parameterType="long" resultType="org.cardGGaduekMainService.card.domain.CardVO">
        SELECT
            id,
            card_number AS cardNumber,
            expiration_date AS expirationDate,
            cvc,
            card_password AS cardPassword,
            created_at AS createdAt,
            custom_image_url AS customImageUrl,
            card_product_id AS cardProductId,
            member_id AS memberId,
            is_valid AS isValid
        FROM
            card
        WHERE
            id = #{cardId}
    </select>

    <select id="findCardsByMemberId" parameterType="long" resultType="org.cardGGaduekMainService.card.dto.CardInfoDTO">
        SELECT
            c.id,
            c.card_number AS cardNumber,
            cp.card_product_name AS cardProductName,
            cp.card_image_url AS cardImageUrl
        FROM
            card c
                JOIN
            card_product cp ON c.card_product_id = cp.id
        WHERE
            c.member_id = #{memberId} AND c.is_valid = 1
    </select>


    <select id="findMyCards" resultMap="myCardMap">
        SELECT
            c.id, c.card_number, cp.id AS card_product_id, cp.card_product_name, cp.card_image_url, cp.required_monthly_spent,
            sb.store_name, sb.store_category, sb.benefit_type, sb.value_type, sb.rate_value, sb.amount_value, sb.description
        FROM member m
            LEFT JOIN card c
                ON m.id = c.member_id
            LEFT JOIN card_product cp
                ON c.card_product_id = cp.id
            LEFT JOIN store_benefit sb
                ON cp.id = sb.card_product_id
        WHERE m.id = #{memberId}

    </select>

    <resultMap id="myCardMap" type="org.cardGGaduekMainService.card.dto.MyCardDTO">
        <id column="id" property="cardId" />
        <result column="card_number" property="cardNumber" />
        <result column="card_product_id" property="cardProductId" />
        <result column="card_product_name" property="cardProductName" />
        <result column="card_image_url" property="cardImageUrl" />
        <result column="required_monthly_spent" property="requiredMonthlySpent" />
        <collection property="storeBenefitList" resultMap="storeBenefitMap" />
    </resultMap>

    <resultMap id="storeBenefitMap" type="org.cardGGaduekMainService.storeBenefit.dto.StoreBenefitDTO" >
        <result column="store_name" property="storeName" />
        <result column="store_category" property="storeCategory" />
        <result column="benefit_type" property="benefitType" />
        <result column="value_type" property="valueType" />
        <result column="rate_value" property="rateValue" />
        <result column="amount_value" property="amountValue" />
        <result column="description" property="description" />
    </resultMap>

</mapper>
